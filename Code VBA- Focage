Private Sub UserForm_Initialize()
    ' Fixer la taille du formulaire
    Me.Width = 800
    Me.Height = 600
    
    ' Empêcher le redimensionnement
    Me.BorderStyle = fmBorderStyleSingle
    
    ' Ajouter les éléments à la liste déroulante TypeForcage
    With cmbTypeForcage
        .AddItem "COMMERCIAL"
        .AddItem "TECHNIQUE"
        .AddItem "ADMINISTRATIF"
    End With

    ' Initialiser la liste déroulante des valideurs
    InitializeValideurDropdown
    
    ' Initialiser la liste déroulante des types d'opérations
    InitializeTypeOperationDropdown cmbTypeOperation
    ' Autres initialisations...
End Sub

Private Sub InitializeValideurDropdown()
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner les valideurs
    query = "SELECT DISTINCT [Nom et Prenoms] FROM Valideurs ORDER BY [Nom et Prenoms]"

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Ajouter les noms à la liste déroulante
    Do While Not rs.EOF
        cmbValideur.AddItem rs.Fields("Nom et Prenoms").Value
        rs.MoveNext
    Loop

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Erreur lors de la connexion à la base de données : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
End Sub

Private Sub InitializeTypeOperationDropdown(cmb As MSForms.ComboBox)
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner les types d'opérations
    query = "SELECT DISTINCT [NomOpération] FROM TypeOperation ORDER BY [NomOpération]"

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Vider la liste déroulante
    cmb.Clear

    ' Ajouter les types d'opérations à la liste déroulante
    Do While Not rs.EOF
        cmb.AddItem rs.Fields("NomOpération").Value
        rs.MoveNext
    Loop

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Erreur lors de la récupération des types d'opérations : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
End Sub

Private Sub CalculerNatureIrregulier()
    Dim MontantAutorisation As Double
    Dim SoldeActuel As Double
    Dim MontantForcage As Double
    Dim SoldePostForcage As Double
    Dim DateValidite As Date
    Dim NatureIrregulier As String

    ' Vérifier que les champs sont des valeurs numériques
    If IsNumeric(txtMontantAutorisation.Value) And IsNumeric(txtSoldeActuel.Value) And IsNumeric(txtMontantForcage.Value) And IsDate(txtDateValidite.Value) Then
        MontantAutorisation = CDbl(txtMontantAutorisation.Value)
        SoldeActuel = CDbl(txtSoldeActuel.Value)
        MontantForcage = CDbl(txtMontantForcage.Value)
        SoldePostForcage = SoldeActuel + MontantForcage
        DateValidite = CDate(txtDateValidite.Value)
        
        ' Calculer la nature de l'irrégulier
        NatureIrregulier = DeterminerNatureIrregulier(MontantAutorisation, SoldePostForcage, DateValidite)
        
        ' Afficher la nature de l'irrégulier dans le champ txtNatureEngagement
        txtNatureEngagement.Value = NatureIrregulier
    End If
End Sub

Private Sub txtMontantAutorisation_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    txtMontantAutorisation.Value = FormatNumber(txtMontantAutorisation.Value, 2)
    CalculerNatureIrregulier
End Sub

Private Sub txtSoldeActuel_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    txtSoldeActuel.Value = FormatNumber(txtSoldeActuel.Value, 2)
    CalculerNatureIrregulier
End Sub

Private Sub txtMontantForcage_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    txtMontantForcage.Value = FormatNumber(txtMontantForcage.Value, 2)
    CalculerNatureIrregulier
End Sub

Private Sub txtDateValidite_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    CalculerNatureIrregulier
End Sub

Private Sub txtID_AfterUpdate()
    ' Vérifiez que l'ID n'est pas vide
    If txtID.Value <> "" Then
        ' Récupérer les données pour l'ID saisi
        RecupererDonneesParID CInt(txtID.Value)
    End If
End Sub

Private Sub RecupererDonneesParID(ID As Integer)
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String
    
    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner les données par ID
    query = "SELECT * FROM DemandesForcage WHERE ID = " & ID
    

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Remplir les champs si une demande est trouvée
    If Not rs.EOF Then
        txtDateDemande.Value = rs.Fields("DateDemande").Value
        txtNumCompteClient.Value = rs.Fields("NumCompteClient").Value
        txtCodeGestionnaire.Value = rs.Fields("CodeGestionnaire").Value
        txtNomGestionnaire.Value = rs.Fields("NomGestionnaire").Value
        txtCodeClient.Value = rs.Fields("CodeClient").Value
        txtNomClient.Value = rs.Fields("NomClient").Value
        txtMontantAutorisation.Value = FormatNumber(rs.Fields("MontantAutorisation").Value, 2)
        txtSoldeActuel.Value = FormatNumber(rs.Fields("SoldeActuel").Value, 2)
        txtMontantForcage.Value = FormatNumber(rs.Fields("MontantForcage").Value, 2)
        txtSoldePostForcage.Value = FormatNumber(rs.Fields("SoldePostForcage").Value, 2)
        txtMontantDepassement.Value = FormatNumber(rs.Fields("MontantDepassement").Value, 2)
        txtPourcentageDepassement.Value = rs.Fields("PourcentageDepassement").Value '& "%"
        txtDateValidite.Value = rs.Fields("DateValidite").Value
        txtPromesseRegularisation.Value = rs.Fields("PromesseRegularisation").Value
        txtDateRegularisation.Value = rs.Fields("DateRegularisation").Value
        txtDureeIrregularite.Value = rs.Fields("DureeIrregularite").Value
        txtRepresentantClient.Value = rs.Fields("RepresentantClient").Value
        cmbTypeOperation.Value = rs.Fields("TypeOperation").Value
        txtCommentaires.Value = rs.Fields("Commentaires").Value
        
        
        ' Récupérer les données de la table Balance pour Rating et Staging
        RecupererRatingStaging txtNumCompteClient.Value

        ' Calculer la nature de l'irrégulier après avoir récupéré les données
        CalculerNatureIrregulier
    Else
        MsgBox "Aucune demande trouvée pour cet ID.", vbInformation
    End If
    

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Erreur lors de la connexion à la base de données : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
End Sub

Private Sub RecupererRatingStaging(NumCompteClient As String)
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner les données par Numéro de Compte Client
    query = "SELECT Rating, Staging FROM Balance WHERE [Numero Compte] = '" & NumCompteClient & "'"

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Remplir les champs si des données sont trouvées
    If Not rs.EOF Then
        txtRating.Value = rs.Fields("Rating").Value
        txtStaging.Value = rs.Fields("Staging").Value
    Else
        MsgBox "Aucune donnée trouvée pour ce numéro de compte dans la table Balance.", vbInformation
    End If

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "Erreur lors de la récupération des données de la table Balance : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
End Sub
Private Sub cmdSubmitForcage_Click()
    On Error GoTo ErrorHandler

    ' Vérifiez que l'ID n'est pas vide
    If txtID.Value = "" Then
        MsgBox "Veuillez saisir un ID valide.", vbExclamation
        Exit Sub
    End If

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim cmd As Object
    Dim rs As Object
    Dim connectionString As String
    Dim dernierID As Long

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et la commande
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString
    cmd.ActiveConnection = conn

    ' Récupérer les informations du valideur sélectionné
    Dim valideurNom As String
    Dim valideurInfo As Collection
    Dim valideurEmail As String
    Dim valideurLAD As String
    valideurNom = cmbValideur.Value
    Set valideurInfo = GetValideurInfo(valideurNom)
    valideurEmail = valideurInfo("Email")
    valideurLAD = valideurInfo("LAD")

    ' Récupérer l'email du conseiller
    Dim conseillerEmail As String
    conseillerEmail = GetConseillerEmail(txtNumCompteClient.Value)

    ' Récupérer le code d'opération sélectionné
    Dim selectedOperation As String
    selectedOperation = cmbTypeOperation.Value

    ' Définir la commande SQL pour insérer les données dans ValidationForcage
    cmd.CommandText = "INSERT INTO ValidationForcage (DemandeForcageID, CodeGestionnaire, NomGestionnaire, CodeClient, NomClient, MontantAutorisation, SoldeActuel, MontantForcage, DateValidite, PromesseRegularisation, DateRegularisation, RepresentantClient, Rating, Staging, TypeForcage, NatureEngagementIrregulier, NiveauValidation, CommentairesCelluleForcage, DateDemande, NumCompteClient, SoldePostForcage, MontantDepassement, PourcentageDepassement, Commentaires, DureeIrregularite, TypeOperation) " & _
                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

    ' Ajouter les paramètres en s'assurant que les types de données correspondent
    cmd.Parameters.Append cmd.CreateParameter("DemandeForcageID", 3, 1, , CInt(txtID.Value)) ' Numérique
    cmd.Parameters.Append cmd.CreateParameter("CodeGestionnaire", 200, 1, 255, IIf(Len(txtCodeGestionnaire.Value) > 0, CStr(txtCodeGestionnaire.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("NomGestionnaire", 200, 1, 255, IIf(Len(txtNomGestionnaire.Value) > 0, CStr(txtNomGestionnaire.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("CodeClient", 200, 1, 255, IIf(Len(txtCodeClient.Value) > 0, CStr(txtCodeClient.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("NomClient", 200, 1, 255, IIf(Len(txtNomClient.Value) > 0, CStr(txtNomClient.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("MontantAutorisation", 5, 1, , IIf(IsNumeric(txtMontantAutorisation.Value), CDbl(txtMontantAutorisation.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("SoldeActuel", 5, 1, , IIf(IsNumeric(txtSoldeActuel.Value), CDbl(txtSoldeActuel.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("MontantForcage", 5, 1, , IIf(IsNumeric(txtMontantForcage.Value), CDbl(txtMontantForcage.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("DateValidite", 7, 1, , IIf(IsDate(txtDateValidite.Value), CDate(txtDateValidite.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("PromesseRegularisation", 200, 1, 255, IIf(Len(txtPromesseRegularisation.Value) > 0, CStr(txtPromesseRegularisation.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("DateRegularisation", 7, 1, , IIf(IsDate(txtDateRegularisation.Value), CDate(txtDateRegularisation.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("RepresentantClient", 200, 1, 255, IIf(Len(txtRepresentantClient.Value) > 0, CStr(txtRepresentantClient.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("Rating", 200, 1, 255, IIf(Len(txtRating.Value) > 0, CStr(txtRating.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("Staging", 200, 1, 255, IIf(Len(txtStaging.Value) > 0, CStr(txtStaging.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("TypeForcage", 200, 1, 255, IIf(Len(cmbTypeForcage.Value) > 0, CStr(cmbTypeForcage.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("NatureEngagementIrregulier", 201, 1, 255, IIf(Len(txtNatureEngagement.Value) > 0, CStr(txtNatureEngagement.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("NiveauValidation", 200, 1, 255, IIf(Len(valideurNom) > 0, CStr(valideurNom), Null))
    cmd.Parameters.Append cmd.CreateParameter("CommentairesCelluleForcage", 201, 1, 255, IIf(Len(txtComForcage.Value) > 0, CStr(txtComForcage.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("DateDemande", 7, 1, , IIf(IsDate(txtDateDemande.Value), CDate(txtDateDemande.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("NumCompteClient", 200, 1, 255, IIf(Len(txtNumCompteClient.Value) > 0, CStr(txtNumCompteClient.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("SoldePostForcage", 5, 1, , IIf(IsNumeric(txtSoldePostForcage.Value), CDbl(txtSoldePostForcage.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("MontantDepassement", 5, 1, , IIf(IsNumeric(txtMontantDepassement.Value), CDbl(txtMontantDepassement.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("PourcentageDepassement", 200, 1, 255, IIf(Len(txtPourcentageDepassement.Value) > 0, CStr(txtPourcentageDepassement.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("Commentaires", 201, 1, 255, IIf(Len(txtCommentaires.Value) > 0, CStr(txtCommentaires.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("DureeIrregularite", 3, 1, , IIf(IsNumeric(txtDureeIrregularite.Value), CLng(txtDureeIrregularite.Value), Null))
    cmd.Parameters.Append cmd.CreateParameter("TypeOperation", 200, 1, 255, IIf(Len(selectedOperation) > 0, CStr(selectedOperation), Null))

    ' Exécuter la commande
    cmd.Execute

    ' Envoi de la notification par email au valideur et au conseiller
    Dim recap As String
    recap = FormatRecapDemandeCompleteHTML(CLng(txtID.Value), txtDateDemande.Value, txtNumCompteClient.Value, txtCodeGestionnaire.Value, txtNomGestionnaire.Value, txtCodeClient.Value, txtNomClient.Value, CDbl(txtMontantAutorisation.Value), CDbl(txtSoldeActuel.Value), CDbl(txtMontantForcage.Value), CDbl(txtSoldePostForcage.Value), CDbl(txtMontantDepassement.Value), txtPourcentageDepassement.Value, txtDateValidite.Value, txtPromesseRegularisation.Value, txtDateRegularisation.Value, txtRepresentantClient.Value, txtComForcage.Value, txtRating.Value, txtStaging.Value, CStr(cmbTypeForcage.Value), txtNatureEngagement.Value, txtDureeIrregularite.Value, valideurLAD, selectedOperation)
    Call SendEmailHTML(valideurEmail, "Demande de forçage à valider - " & txtNomClient.Value & " - LAD : " & valideurLAD & " ", recap, "komlamartinchokki@outlook.com")
    ' Confirmation
    MsgBox "Les données ont été soumises avec succès et notification envoyée au valideur et au conseiller!", vbInformation
    Unload Me
    Exit Sub

ErrorHandler:
    MsgBox "Erreur lors de la soumission des données : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set cmd = Nothing
End Sub

Private Function GetValideurInfo(valideurNom As String) As Collection
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String
    Dim valideurInfo As New Collection

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner l'email et le LAD du valideur
    query = "SELECT Emails, LAD FROM Valideurs WHERE [Nom et Prenoms] = '" & valideurNom & "'"

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Récupérer l'email et le LAD
    If Not rs.EOF Then
        valideurInfo.Add rs.Fields("Emails").Value, "Email"
        valideurInfo.Add rs.Fields("LAD").Value, "LAD"
    Else
        valideurInfo.Add "", "Email"
        valideurInfo.Add "", "LAD"
    End If

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Set GetValideurInfo = valideurInfo
    Exit Function

ErrorHandler:
    MsgBox "Erreur lors de la récupération des informations du valideur : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
    Set GetValideurInfo = Nothing
End Function

Private Function GetConseillerEmail(NumCompteClient As String) As String
    On Error GoTo ErrorHandler

    ' Définir la chaîne de connexion à la base de données Access
    Dim conn As Object
    Dim rs As Object
    Dim connectionString As String
    Dim query As String

    connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\user\OneDrive\Desktop\Forcage\DemandesForcage.accdb;" ' Remplacez par le chemin correct

    ' Créer la connexion et le Recordset
    Set conn = CreateObject("ADODB.Connection")
    Set rs = CreateObject("ADODB.Recordset")

    ' Ouvrir la connexion
    conn.Open connectionString

    ' Définir la requête SQL pour sélectionner l'email du conseiller
    query = "SELECT Contact FROM Balance WHERE [Numero Compte] = '" & NumCompteClient & "'"

    ' Ouvrir le Recordset
    rs.Open query, conn, 1, 3 ' 1 = adOpenKeyset, 3 = adLockOptimistic

    ' Récupérer l'adresse email
    If Not rs.EOF Then
        GetConseillerEmail = rs.Fields("Contact").Value
    Else
        GetConseillerEmail = ""
    End If

    ' Fermer le Recordset et la connexion
    rs.Close
    conn.Close

    ' Libérer les objets
    Set rs = Nothing
    Set conn = Nothing
    Exit Function

ErrorHandler:
    MsgBox "Erreur lors de la récupération de l'adresse email du conseiller : " & Err.Description, vbCritical
    If Not conn Is Nothing Then
        conn.Close
        Set conn = Nothing
    End If
    Set rs = Nothing
    GetConseillerEmail = ""
End Function

Sub SendEmailHTML(ToEmail As String, Subject As String, Body As String, CcEmail As String)
    Dim OutApp As Object
    Dim OutMail As Object

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .To = ToEmail
        .CC = CcEmail
        .Subject = Subject
        .HTMLBody = Body
        .Send
    End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub
